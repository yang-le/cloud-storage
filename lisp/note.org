#+TITLE: ANSI Common Lisp 中文版 笔记
#+PROPERTY: header-args :exports both

* 简介
** 新的工具
*** 从0累加到n的lisp实现
#+BEGIN_SRC lisp
  (defun sum (n)
    (let ((s 0))
      (dotimes (i n s)
        (incf s i))))
#+END_SRC

#+BEGIN_SRC lisp
  (sum 5)
#+END_SRC

#+RESULTS:
: 10

*** 从0累加到n的c实现
#+BEGIN_SRC C
  int sum(int n) {
      int i, s = 0;
      for (i = 0; i < n; ++i)
          s += i;
      return (s);
  }
#+END_SRC

#+BEGIN_SRC C
  printf("%d", sum(5));
#+END_SRC

#+RESULTS:
: 10

*** 一个lisp闭包的例子
#+BEGIN_SRC lisp
  (defun addn (n)
    #'(lambda (x)
        (+ x n)))
#+END_SRC

#+BEGIN_SRC lisp
  (funcall (addn 3) 2)
#+END_SRC

#+RESULTS:
: 5

** 新的技术
** 新的方法
* 欢迎来到Lisp
** 形式
*** 最简单的lisp表达式
#+BEGIN_SRC lisp
1
#+END_SRC

#+RESULTS:
: 1

*** 加法函数
#+BEGIN_SRC lisp
(+)
#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC lisp
(+ 2)
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC lisp
(+ 2 3)
#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC lisp
(+ 2 3 4)
#+END_SRC

#+RESULTS:
: 9

*** 略复杂的表达式
#+BEGIN_SRC lisp
(/ (- 7 1) (- 4 2))
#+END_SRC

#+RESULTS:
: 3

** 求值
*** 引用
#+BEGIN_SRC lisp
  (quote (+ 3 5))
#+END_SRC

#+RESULTS:
| + | 3 | 5 |

#+BEGIN_SRC lisp
'(+ 3 5)
#+END_SRC

#+RESULTS:
| + | 3 | 5 |

** 数据
*** 符号
#+BEGIN_SRC lisp
'Artichoke
#+END_SRC

#+RESULTS:
: ARTICHOKE

*** 列表
**** 一个例子
#+BEGIN_SRC lisp
'(my 3 "Sons")
#+END_SRC

#+RESULTS:
| MY | 3 | Sons |

**** 引用保护了整个表达式（包括内部的子表达式）被求值
#+BEGIN_SRC lisp
  '(the list (a b c) has 3 elements)
#+END_SRC

#+RESULTS:
| THE | LIST | (A B C) | HAS | 3 | ELEMENTS |

**** 可以调用list创建列表
#+BEGIN_SRC lisp
(list 'my (+ 2 1) "Sons")
#+END_SRC

#+RESULTS:
| MY | 3 | Sons |

**** 被引用的列表被视为数据，未被引用的列表被视为函数调用
#+BEGIN_SRC lisp
  (list '(+ 2 1) (+ 2 1))
#+END_SRC

#+RESULTS:
| (+ 2 1) | 3 |

**** 表示空表的两种方法
#+BEGIN_SRC lisp
()
#+END_SRC

#+RESULTS:
: NIL

#+BEGIN_SRC lisp
nil
#+END_SRC

#+RESULTS:
: NIL

** 列表操作
*** cons
**** 例子
#+BEGIN_SRC lisp
(cons 'a '(b c d))
#+END_SRC

#+RESULTS:
| A | B | C | D |

**** list可以用cons实现
#+BEGIN_SRC lisp
(cons 'a (cons 'b nil))
#+END_SRC

#+RESULTS:
| A | B |

#+BEGIN_SRC lisp
(list 'a 'b)
#+END_SRC

#+RESULTS:
| A | B |

*** car和cdr
**** 例子
#+BEGIN_SRC lisp
(car '(a b c))
#+END_SRC

#+RESULTS:
: A

#+BEGIN_SRC lisp
(cdr '(a b c))
#+END_SRC

#+RESULTS:
| B | C |

**** 混合使用
#+BEGIN_SRC lisp
(car (cdr (cdr '(a b c d))))
#+END_SRC

#+RESULTS:
: C

**** 简写
#+BEGIN_SRC lisp
(third '(a b c d))
#+END_SRC

#+RESULTS:
: C

#+BEGIN_SRC lisp
(caddr '(a b c d))
#+END_SRC

#+RESULTS:
: C

** 真与假
*** listp
#+BEGIN_SRC lisp
(listp '(a b c))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp
(listp 27)
#+END_SRC

#+RESULTS:
: NIL

*** null 和 not
null用来判断一个列表是否为空
#+BEGIN_SRC lisp
(null nil)
#+END_SRC

#+RESULTS:
: T

not用来判断一个逻辑条件是否为假
#+BEGIN_SRC lisp
(not nil)
#+END_SRC

#+RESULTS:
: T

*** if
#+BEGIN_SRC lisp
  (if t 'exp1 'exp2)
#+END_SRC

#+RESULTS:
: EXP1

#+BEGIN_SRC lisp
(if nil 'exp1 'exp2)
#+END_SRC

#+RESULTS:
: EXP2

如果忽略if的最后一个参数,默认值为nil.
#+BEGIN_SRC lisp
(if nil 'exp)
#+END_SRC

#+RESULTS:
: NIL

另外,任何不是nil的东西,都会被if视为t.
#+BEGIN_SRC lisp
(if 0 'exp)
#+END_SRC

#+RESULTS:
: EXP

*** and 和 or
and和or都是短路操作符
#+BEGIN_SRC lisp
(and nil (+ 1 2))
#+END_SRC

#+RESULTS:
: NIL

#+BEGIN_SRC lisp
(and t (+ 1 2))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC lisp
(or t (+ 1 2))
#+END_SRC

#+RESULTS:
: T

** 函数
*** defun
#+BEGIN_SRC lisp
  (defun our-third (x)
    (car (cdr (cdr x))))
#+END_SRC

#+BEGIN_SRC lisp
  (our-third '(a b c d))
#+END_SRC

#+RESULTS:
: C

** 递归
#+BEGIN_SRC lisp
  (defun our-member (obj lst)
    (if (null lst)
        nil
        (if (eql (car lst) obj)
            lst
            (our-member obj (cdr lst)))))
#+END_SRC

#+BEGIN_SRC lisp
(our-member 'b '(a b c))
#+END_SRC

#+RESULTS:
| B | C |

#+BEGIN_SRC lisp
(our-member 'z '(a b c))
#+END_SRC

#+RESULTS:
: NIL

** 阅读Lisp
** 输入输出
*** format
#+BEGIN_SRC lisp :results output
  (format t "~A plus ~A equals ~A. ~%" 2 3 (+ 2 3))
#+END_SRC

#+RESULTS:
: 2 plus 3 equals 5.

*** read
#+BEGIN_SRC lisp
  (defun askem (string)
    (format t "~A" string)
    (read))
#+END_SRC

#+BEGIN_SRC lisp
(askem "How old are you?")
#+END_SRC

** 变量
*** 局部变量
#+BEGIN_SRC lisp
  (let ((x 1) (y 2))
    (+ x y))
#+END_SRC

#+RESULTS:
: 3

*** 全局变量
#+BEGIN_SRC lisp
  (defparameter *glob* 99)
#+END_SRC

#+RESULTS:
: *GLOB*

*** 全局常量
#+BEGIN_SRC lisp
  (defconstant limit (+ *glob* 1))
#+END_SRC

#+RESULTS:
: LIMIT

*** 全局量的检查
#+BEGIN_SRC lisp
  (boundp '*glob*)
#+END_SRC

#+RESULTS:
: T

** 赋值
*** 例子
#+BEGIN_SRC lisp
  (setf *glob* 98)
#+END_SRC

#+RESULTS:
: 98

#+BEGIN_SRC lisp
  (let ((n 10))
    (setf n 2)
    n)
#+END_SRC

#+RESULTS:
: 2

*** 使用setf创建全局变量
#+BEGIN_SRC lisp
  (setf x (list 'a 'b 'c))
#+END_SRC

#+RESULTS:
| A | B | C |

*** 设定任意位置上的内容
#+BEGIN_SRC lisp
  (setf (car x) 'n)
  x
#+END_SRC

#+RESULTS:
| N | B | C |

*** 多个参数调用setf
#+BEGIN_SRC lisp
  (setf a 'b c 'd e 'f)
  (list a c e)
#+END_SRC

#+RESULTS:
| B | D | F |

** 函数式编程
函数式编程本质上意味着避免使用如setf一类的函数

** 迭代
*** do
#+BEGIN_SRC lisp
  (defun show-squares (start end)
    (do ((i start (+ i 1)))
        ((> i end) 'done)
      (format t "~A ~A~%" i (* i i))))
#+END_SRC

#+BEGIN_SRC lisp :results output
(show-squares 2 5)
#+END_SRC

#+RESULTS:
: 2 4
: 3 9
: 4 16
: 5 25

*** dolist
#+BEGIN_SRC lisp
  (defun our-length (lst)
    (let ((len 0))
      (dolist (obj lst)
        (setf len (+ len 1)))
      len))
#+END_SRC

#+BEGIN_SRC lisp
(our-length '(a b c))
#+END_SRC

#+RESULTS:
: 3

** 函数作为对象
*** sharp quote
'是quote的缩写,而#'是function的缩写
*** apply和funcall
#+BEGIN_SRC lisp
  (apply #'+ '(1 2 3))
#+END_SRC

#+RESULTS:
: 6
#+BEGIN_SRC lisp
  (funcall #'+ 1 2 3)
#+END_SRC

#+RESULTS:
: 6
*** lambda符号
#+BEGIN_SRC lisp
  ((lambda (x) (+ x 100)) 1)
#+END_SRC

#+RESULTS:
: 101

#+BEGIN_SRC lisp
  (funcall #'(lambda (x) (+ x 100)) 1)
#+END_SRC

#+RESULTS:
: 101
** 类型
*** typep
#+BEGIN_SRC lisp
(typep 27 'integer)
#+END_SRC

#+RESULTS:
: T

** 展望
** 习题
*** 描述下列表达式求值之结果
#+BEGIN_SRC lisp
  (+ (- 5 1) (+ 3 7))
#+END_SRC

#+RESULTS:
: 14

#+BEGIN_SRC lisp
  (list 1 (+ 2 3))
#+END_SRC

#+RESULTS:
| 1 | 5 |

#+BEGIN_SRC lisp
  (if (listp 1) (+ 1 2) (+ 3 4))
#+END_SRC

#+RESULTS:
: 7

#+BEGIN_SRC lisp
  (list (and (listp 3) t) (+ 1 2))
#+END_SRC

#+RESULTS:
| NIL | 3 |

*** 给出三种不同表示(a b c)的cons表达式
#+BEGIN_SRC lisp
(cons 'a '(b c))
(cons 'a (cons 'b '(c)))
(cons 'a (cons 'b (cons 'c '())))
#+END_SRC

#+RESULTS:
| A | B | C |

*** 使用car和cdr定义一个函数,返回一个列表的第四个元素
#+BEGIN_SRC lisp
  (defun my-forth (lst)
    (car (cdr (cdr (cdr lst)))))
#+END_SRC

#+BEGIN_SRC lisp
(my-forth '(1 2 3 4 5))
#+END_SRC

#+RESULTS:
: 4

*** 定义一个函数,接受两个实参,返回两者当中较大的那个
#+BEGIN_SRC lisp
  (defun my-max (a b)
    (if (> a b) a b))
#+END_SRC

#+BEGIN_SRC lisp
(my-max -1 3)
#+END_SRC

#+RESULTS:
: 3

*** 这些函数做了什么
#+BEGIN_SRC lisp
  (defun enigma (x)
    (and (not (null x))
         (or (null (car x))
             (enigma (cdr x)))))
#+END_SRC

#+RESULTS:
: ENIGMA

该函数判断一个表中是否有为nil的元素,例如
#+BEGIN_SRC lisp
(enigma '(2 () 3))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp
  (defun mystery (x y)
    (if (null y)
        nil
        (if (eql (car y) x)
            0
            (let ((z (mystery x (cdr y))))
              (and z (+ z 1))))))
#+END_SRC

#+RESULTS:
: MYSTERY

该函数返回表y中第一次出现x的位置,例如
#+BEGIN_SRC lisp
(mystery '1 '(2 3 1 4))
#+END_SRC

#+RESULTS:
: 2
*** 下列表达式,x该是什么,才会得到相同结果
#+BEGIN_SRC lisp
(car (x (cdr '(a (b c) d))))
#+END_SRC

#+RESULTS:
: B

#+BEGIN_SRC lisp
(x 13 (/ 1 0))
#+END_SRC

#+RESULTS:
: 13

#+BEGIN_SRC lisp
(x #'list 1 nil)
#+END_SRC

#+RESULTS:
| 1 |

*** 定义一个函数,接受一个列表作为参数,如果列表中有一个元素是列表,就返回真
